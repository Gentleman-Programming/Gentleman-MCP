/**
 * @fileoverview gRPC-Web generated client stub for mcp.v1
 * @enhanceable
 * @public
 */

// Code generated by protoc-gen-grpc-web. DO NOT EDIT.
// versions:
// 	protoc-gen-grpc-web v1.5.0
// 	protoc              v0.0.0
// source: mcp/v1/mcp.proto

/* eslint-disable */
// @ts-nocheck

import * as grpcWeb from "grpc-web";

import * as mcp_v1_mcp_pb from "./mcp_pb"; // proto import: "mcp/v1/mcp.proto"

export class HandshakeServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any },
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorRegister = new grpcWeb.MethodDescriptor(
    "/mcp.v1.HandshakeService/Register",
    grpcWeb.MethodType.UNARY,
    mcp_v1_mcp_pb.RegisterRequest,
    mcp_v1_mcp_pb.RegisterResponse,
    (request: mcp_v1_mcp_pb.RegisterRequest) => {
      return request.serializeBinary();
    },
    mcp_v1_mcp_pb.RegisterResponse.deserializeBinary,
  );

  register(
    request: mcp_v1_mcp_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<mcp_v1_mcp_pb.RegisterResponse>;

  register(
    request: mcp_v1_mcp_pb.RegisterRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: mcp_v1_mcp_pb.RegisterResponse,
    ) => void,
  ): grpcWeb.ClientReadableStream<mcp_v1_mcp_pb.RegisterResponse>;

  register(
    request: mcp_v1_mcp_pb.RegisterRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: mcp_v1_mcp_pb.RegisterResponse,
    ) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/mcp.v1.HandshakeService/Register",
        request,
        metadata || {},
        this.methodDescriptorRegister,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mcp.v1.HandshakeService/Register",
      request,
      metadata || {},
      this.methodDescriptorRegister,
    );
  }

  methodDescriptorAuthenticate = new grpcWeb.MethodDescriptor(
    "/mcp.v1.HandshakeService/Authenticate",
    grpcWeb.MethodType.UNARY,
    mcp_v1_mcp_pb.AuthRequest,
    mcp_v1_mcp_pb.AuthResponse,
    (request: mcp_v1_mcp_pb.AuthRequest) => {
      return request.serializeBinary();
    },
    mcp_v1_mcp_pb.AuthResponse.deserializeBinary,
  );

  authenticate(
    request: mcp_v1_mcp_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<mcp_v1_mcp_pb.AuthResponse>;

  authenticate(
    request: mcp_v1_mcp_pb.AuthRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: mcp_v1_mcp_pb.AuthResponse,
    ) => void,
  ): grpcWeb.ClientReadableStream<mcp_v1_mcp_pb.AuthResponse>;

  authenticate(
    request: mcp_v1_mcp_pb.AuthRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: mcp_v1_mcp_pb.AuthResponse,
    ) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/mcp.v1.HandshakeService/Authenticate",
        request,
        metadata || {},
        this.methodDescriptorAuthenticate,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mcp.v1.HandshakeService/Authenticate",
      request,
      metadata || {},
      this.methodDescriptorAuthenticate,
    );
  }
}

export class AgentServiceClient {
  client_: grpcWeb.AbstractClientBase;
  hostname_: string;
  credentials_: null | { [index: string]: string };
  options_: null | { [index: string]: any };

  constructor(
    hostname: string,
    credentials?: null | { [index: string]: string },
    options?: null | { [index: string]: any },
  ) {
    if (!options) options = {};
    if (!credentials) credentials = {};
    options["format"] = "text";

    this.client_ = new grpcWeb.GrpcWebClientBase(options);
    this.hostname_ = hostname.replace(/\/+$/, "");
    this.credentials_ = credentials;
    this.options_ = options;
  }

  methodDescriptorSingleChat = new grpcWeb.MethodDescriptor(
    "/mcp.v1.AgentService/SingleChat",
    grpcWeb.MethodType.UNARY,
    mcp_v1_mcp_pb.SingleChatRequest,
    mcp_v1_mcp_pb.SingleChatResponse,
    (request: mcp_v1_mcp_pb.SingleChatRequest) => {
      return request.serializeBinary();
    },
    mcp_v1_mcp_pb.SingleChatResponse.deserializeBinary,
  );

  singleChat(
    request: mcp_v1_mcp_pb.SingleChatRequest,
    metadata?: grpcWeb.Metadata | null,
  ): Promise<mcp_v1_mcp_pb.SingleChatResponse>;

  singleChat(
    request: mcp_v1_mcp_pb.SingleChatRequest,
    metadata: grpcWeb.Metadata | null,
    callback: (
      err: grpcWeb.RpcError,
      response: mcp_v1_mcp_pb.SingleChatResponse,
    ) => void,
  ): grpcWeb.ClientReadableStream<mcp_v1_mcp_pb.SingleChatResponse>;

  singleChat(
    request: mcp_v1_mcp_pb.SingleChatRequest,
    metadata?: grpcWeb.Metadata | null,
    callback?: (
      err: grpcWeb.RpcError,
      response: mcp_v1_mcp_pb.SingleChatResponse,
    ) => void,
  ) {
    if (callback !== undefined) {
      return this.client_.rpcCall(
        this.hostname_ + "/mcp.v1.AgentService/SingleChat",
        request,
        metadata || {},
        this.methodDescriptorSingleChat,
        callback,
      );
    }
    return this.client_.unaryCall(
      this.hostname_ + "/mcp.v1.AgentService/SingleChat",
      request,
      metadata || {},
      this.methodDescriptorSingleChat,
    );
  }
}
